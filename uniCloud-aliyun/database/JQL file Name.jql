// 本文件用于，使用JQL语法操作项目关联的uniCloud空间的数据库，方便开发调试和远程数据库管理
// 编写clientDB的js API（也支持常规js语法，比如var），可以对云数据库进行增删改查操作。不支持uniCloud-db组件写法
// 可以全部运行，也可以选中部分代码运行。点击工具栏上的运行按钮或者按下【F5】键运行代码
// 如果文档中存在多条JQL语句，只有最后一条语句生效
// 如果混写了普通js，最后一条语句需是数据库操作语句
// 此处代码运行不受DB Schema的权限控制，移植代码到实际业务中注意在schema中配好permission
// 不支持clientDB的action
// 数据库查询有最大返回条数限制，详见：https://uniapp.dcloud.net.cn/uniCloud/cf-database?id=limit
// 详细JQL语法，请参考 https://uniapp.dcloud.net.cn/uniCloud/clientdb?id=jsquery

// 下面示例查询uni-id-users表的所有数据
const dbCmd = db.command
db.collection('uni-id-users').update({
  wx_openid: {
    'app-plus': dbCmd.rename('wx_openid.app'), // app端微信openid
    'mp-weixin': dbCmd.rename('wx_openid.mp'), // 小程序端微信openid
    'h5-weixin': dbCmd.rename('wx_openid.h5'), // 微信公众号端微信openid
    'h5-web': dbCmd.rename('wx_openid.web') // web端微信openid
  },
  qq_openid: {
    'app-plus': dbCmd.rename('qq_openid.app'), // app端QQ openid
    'mp-qq': dbCmd.rename('qq_openid.mp') // 小程序端QQ openid
  }
})
db.collection("usemall-goods-category").where(
  dbCmd.or({
    _id: id,
  }, {
    pid: id,
  })
).get();

db.collection("usemall-app-category").update({
  ctype: 1
})

db.collection("usemall-app-category").get()

db.collection("usemall-goods").where({
  cid: '628cb47fd3209100019a55c4'
}).remove()

db.collection("uni-id-users").remove()

'use strict';
const db = uniCloud.database()
const dbCmd = db.command
exports.main = async (event, context) => {
  await db.collection('uni-id-users').update({
    wx_openid: {
      'app-plus': dbCmd.rename('wx_openid.app'), // app端微信openid
      'mp-weixin': dbCmd.rename('wx_openid.mp'), // 小程序端微信openid
      'h5-weixin': dbCmd.rename('wx_openid.h5'), // 微信公众号端微信openid
      'h5-web': dbCmd.rename('wx_openid.web') // web端微信openid
    },
    qq_openid: {
      'app-plus': dbCmd.rename('qq_openid.app'), // app端QQ openid
      'mp-qq': dbCmd.rename('qq_openid.mp') // 小程序端QQ openid
    }
  })
  return {}
};

db.collection('usemall-goods, uni-id-users')
  .field('cid, img, create_time, name, create_uid.nickname as user_nickname, create_uid.avatar_file.url as user_avatar_url')
  .orderBy('create_time desc')
  .get()

const goodList = db
  .collection('usemall-goods')
  .getTemp()
db
  .collection(goodList, 'uni-id-users')
  .field(
    'cid, img, create_time, name, create_uid.nickname, create_uid.avatar_file.url'
  )
  .get() // 将获取的goods表的临时表和user表进行联表查询

const goodList = db
  .collection('usemall-goods')
  .where(this.cid == 0 ? `state == '销售中'` : `'${this.cid}' in cids && state == '销售中'`)
  .getTemp() // 注意结尾的方法是getTemp，对order表过滤得到临时表

var res1 = await db
  .collection(goodList, 'uni-id-users')
  .field(
    'cid, img, create_time, name, create_uid.nickname as user_nickname, create_uid.avatar_file.url as user_avatar_url'
  )
  .get() // 将获取的goods表的临时表和user表进行联表查询

console.log(res1)
